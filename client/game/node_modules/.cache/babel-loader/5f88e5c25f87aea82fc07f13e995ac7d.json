{"ast":null,"code":"import _classCallCheck from \"/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/src/components/Ball.js\";\nimport React, { PureComponent } from \"react\";\nimport { Circle } from \"react-konva\";\nimport { WIDTH, HEIGHT } from \"./Field\";\nimport animate from \"../functions/movement\";\nvar MIN_X = 12,\n    MIN_Y = 12,\n    MAX_X = WIDTH - MIN_X,\n    MAX_Y = HEIGHT - MIN_Y;\n\nvar Ball =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Ball, _PureComponent);\n\n  function Ball() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Ball);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Ball)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      color: _this.props.color,\n      x: Math.random() * (MAX_X - MIN_X) + MIN_X,\n      y: Math.random() * (MAX_Y - MIN_Y) + MIN_Y,\n      direction: {\n        x: 0,\n        y: 0\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Ball, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setInterval(10, function () {\n        return _this2.setState(animate);\n      });\n    }\n    /* \n    newCoord = (val, delta, max, min) => {\n      let newVal = val + delta;\n      let newDelta = delta;\n       if (newVal > max) {\n        newVal = min + newVal - max;\n      }\n       if (newVal < min) {\n        newVal = max - newVal;\n      }\n       return { val: newVal, delta: newDelta };\n    }; */\n\n    /* animate = () => {\n      const { x, y } = this.state,\n        { horizontal, vertical } = this.props;\n       if (horizontal !== 0 || vertical !== 0) {\n        const newX = this.newCoord(x, horizontal, MAX_X, MIN_X);\n        const newY = this.newCoord(y, vertical, MAX_Y, MIN_Y);\n         this.setState({\n          x: newX.val,\n          y: newY.val,\n          direction: {\n            x: newX.delta,\n            y: newY.delta\n          }\n        });\n      }\n       this.animationTimeout = setTimeout(this.animate, 5);\n    };\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          color = _this$state.color,\n          x = _this$state.x,\n          y = _this$state.y;\n      return React.createElement(Circle, {\n        ref: function ref(comp) {\n          _this3.ball = comp;\n        },\n        x: x,\n        y: y,\n        radius: 10,\n        fill: color,\n        shadowBlur: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.animationTimeout);\n    }\n  }]);\n\n  return Ball;\n}(PureComponent);\n\nexport { Ball as default };","map":{"version":3,"sources":["/home/robert/Desktop/codaisseur/week-7/Space-Game/client/game/src/components/Ball.js"],"names":["React","PureComponent","Circle","WIDTH","HEIGHT","animate","MIN_X","MIN_Y","MAX_X","MAX_Y","Ball","state","color","props","x","Math","random","y","direction","setInterval","setState","comp","ball","clearTimeout","animationTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,SAA9B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,IAAMC,KAAK,GAAG,EAAd;AAAA,IACEC,KAAK,GAAG,EADV;AAAA,IAEEC,KAAK,GAAGL,KAAK,GAAGG,KAFlB;AAAA,IAGEG,KAAK,GAAGL,MAAM,GAAGG,KAHnB;;IAKqBG,I;;;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,MAAKC,KAAL,CAAWD,KADZ;AAENE,MAAAA,CAAC,EAAEC,IAAI,CAACC,MAAL,MAAiBR,KAAK,GAAGF,KAAzB,IAAkCA,KAF/B;AAGNW,MAAAA,CAAC,EAAEF,IAAI,CAACC,MAAL,MAAiBP,KAAK,GAAGF,KAAzB,IAAkCA,KAH/B;AAINW,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,CAAC,EAAE,CAAL;AAAQG,QAAAA,CAAC,EAAE;AAAX;AAJL,K;;;;;;wCAOY;AAAA;;AAClBE,MAAAA,WAAW,CAAC,EAAD,EAAK;AAAA,eAAM,MAAI,CAACC,QAAL,CAAcf,OAAd,CAAN;AAAA,OAAL,CAAX;AACD;AACD;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;6BAqBS;AAAA;;AAAA,wBACiB,KAAKM,KADtB;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQE,CADR,eACQA,CADR;AAAA,UACWG,CADX,eACWA,CADX;AAGP,aACE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAE,aAAAI,IAAI,EAAI;AACX,UAAA,MAAI,CAACC,IAAL,GAAYD,IAAZ;AACD,SAHH;AAIE,QAAA,CAAC,EAAEP,CAJL;AAKE,QAAA,CAAC,EAAEG,CALL;AAME,QAAA,MAAM,EAAE,EANV;AAOE,QAAA,IAAI,EAAEL,KAPR;AAQE,QAAA,UAAU,EAAE,CARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD;;;2CAEsB;AACrBW,MAAAA,YAAY,CAAC,KAAKC,gBAAN,CAAZ;AACD;;;;EAnE+BvB,a;;SAAbS,I","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Circle } from \"react-konva\";\nimport { WIDTH, HEIGHT } from \"./Field\";\nimport animate from \"../functions/movement\";\n\nconst MIN_X = 12,\n  MIN_Y = 12,\n  MAX_X = WIDTH - MIN_X,\n  MAX_Y = HEIGHT - MIN_Y;\n\nexport default class Ball extends PureComponent {\n  state = {\n    color: this.props.color,\n    x: Math.random() * (MAX_X - MIN_X) + MIN_X,\n    y: Math.random() * (MAX_Y - MIN_Y) + MIN_Y,\n    direction: { x: 0, y: 0 }\n  };\n\n  componentDidMount() {\n    setInterval(10, () => this.setState(animate));\n  }\n  /* \n  newCoord = (val, delta, max, min) => {\n    let newVal = val + delta;\n    let newDelta = delta;\n\n    if (newVal > max) {\n      newVal = min + newVal - max;\n    }\n\n    if (newVal < min) {\n      newVal = max - newVal;\n    }\n\n    return { val: newVal, delta: newDelta };\n  }; */\n\n  /* animate = () => {\n    const { x, y } = this.state,\n      { horizontal, vertical } = this.props;\n\n    if (horizontal !== 0 || vertical !== 0) {\n      const newX = this.newCoord(x, horizontal, MAX_X, MIN_X);\n      const newY = this.newCoord(y, vertical, MAX_Y, MIN_Y);\n\n      this.setState({\n        x: newX.val,\n        y: newY.val,\n        direction: {\n          x: newX.delta,\n          y: newY.delta\n        }\n      });\n    }\n\n    this.animationTimeout = setTimeout(this.animate, 5);\n  };\n */\n  render() {\n    const { color, x, y } = this.state;\n\n    return (\n      <Circle\n        ref={comp => {\n          this.ball = comp;\n        }}\n        x={x}\n        y={y}\n        radius={10}\n        fill={color}\n        shadowBlur={1}\n      />\n    );\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.animationTimeout);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}